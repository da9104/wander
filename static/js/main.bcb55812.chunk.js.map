{"version":3,"sources":["components/SearchBar.js","apis/youtube.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","handleSubmit","e","preventDefault","_this","props","onTermSubmit","setState","handleChange","target","value","react_default","a","createElement","className","onSubmit","this","type","placeholder","onChange","React","Component","API_KEY","concat","process","axios","create","baseURL","params","part","maxResults","key","VideoItem","_ref","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","renderedList","map","src_components_VideoItem","id","videoId","VideoDetail","videoSrc","frameBorder","description","App","selectedVideo","_callee","response","regenerator_default","wrap","_context","prev","next","youtube","get","q","sent","data","items","stop","components_SearchBar","Grid","Row","VideoDetail_VideoDetail","components_VideoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcb55812.chunk.js","sourcesContent":["import React from \"react\";\n\nclass SearchBar extends React.Component {\n  state = {term: \"\"};\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onTermSubmit(this.state.term);\n    this.setState({term: \"\"});\n\n    //console.log(this.props.onTermSubmit);\n\n  };\n\n  handleChange = e => {\n    this.setState({term: e.target.value});\n  };\n\n  render() {\n    return (\n      <div className=\"ui segment search-bar \">\n        <form className=\"ui form\" onSubmit={this.handleSubmit}>\n          <div className=\"field\">\n            <label>Video Search</label>\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              onChange={this.handleChange}\n              value={this.state.term}\n              // onChange={(e) => this.setState({ term: e.target.value})}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import axios from \"axios\";\n\nconst API_KEY = `${process.env.REACT_APP_API_KEY}`;\n\nexport default axios.create({\n  baseURL: \" https://www.googleapis.com/youtube/v3\",\n  params: {\n    part: \"snippet\",\n    maxResults: 5,\n    type: \"video\",\n    key: API_KEY,\n  },\n});\n","import React from \"react\";\nimport \"./VideoItem.css\";\n\nconst VideoItem = ({video, onVideoSelect}) => (\n  //console.log(video);\n\n  <div onClick={() => onVideoSelect(video)} className=\"video-item item\">\n    <img\n      className=\"ui image\"\n      // size=\"large\"\n      src={video.snippet.thumbnails.medium.url}\n      alt={video.snippet.title}\n    />\n    <div className=\"content\">\n      <div className=\"header\">{video.snippet.title}</div>\n    </div>\n  </div>\n);\nexport default VideoItem;\n","import React from \"react\";\nimport VideoItem from \"./VideoItem\";\n\nconst VideoList = ({videos, onVideoSelect}) => {\n  //console.log(props.videos[0])\n  const renderedList = videos.map(video => (\n    <VideoItem\n      key={video.id.videoId}\n      video={video}\n      onVideoSelect={onVideoSelect}\n    />\n  ));\n\n  return <div className=\"ui relaxed divided list\">{renderedList}</div>;\n};\n\nexport default VideoList;\n","import React from \"react\";\n\nconst VideoDetail = ({video}) => {\n  // console.log(video);\n\n  if (!video) {\n    return <div />;\n  }\n\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\n\n  return (\n    <div>\n      <div className=\"ui embed\">\n        <iframe src={videoSrc} frameBorder=\"0\" title=\"video player\" />\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\n        <p className=\"description\">{video.snippet.description}</p>\n      </div>\n    </div>\n  );\n};\n\nexport {VideoDetail as default};\n","import React from \"react\";\nimport {Grid} from \"semantic-ui-react\";\nimport SearchBar from \"./SearchBar\";\nimport youtube from \"../apis/youtube\";\nimport VideoList from \"./VideoList\";\nimport VideoDetail from \"./VideoDetail\";\n\nclass App extends React.Component {\n  state = {videos: [], selectedVideo: null};\n\n  componentDidMount() {\n    this.onTermSubmit(\"TED\");\n  }\n\n  onTermSubmit = async term => {\n    //console.log(term);\n    const response = await youtube.get(\"/search\", {\n      params: {\n        q: term,\n      },\n    });\n\n    //console.log(response.data.items);\n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[0],\n    });\n  };\n\n  onVideoSelect = video => {\n    // console.log(video);\n    this.setState({selectedVideo: video});\n  };\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <SearchBar onTermSubmit={this.onTermSubmit} />\n        <Grid>\n          <Grid.Row>\n            <div className=\"eleven wide column\">\n              <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className=\"five wide column\">\n              <VideoList\n                videos={this.state.videos}\n                onVideoSelect={this.onVideoSelect}\n              />\n            </div>\n          </Grid.Row>\n          {/* We found {this.state.videos.length} videos.. */}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}